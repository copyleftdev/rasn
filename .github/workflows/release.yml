name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rasn
            asset_name: rasn-linux-amd64
            archive: tar.gz
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: rasn
            asset_name: rasn-linux-musl-amd64
            archive: tar.gz
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rasn
            asset_name: rasn-linux-aarch64
            archive: tar.gz
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rasn.exe
            asset_name: rasn-windows-amd64.exe
            archive: zip
            
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rasn
            asset_name: rasn-macos-amd64
            archive: tar.gz
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rasn
            asset_name: rasn-macos-aarch64
            archive: tar.gz

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --bin rasn
      
      - name: Package binary (tar.gz)
        if: matrix.archive == 'tar.gz'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.tar.gz ${{ github.workspace }}
      
      - name: Package binary (zip)
        if: matrix.archive == 'zip'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          move ${{ matrix.asset_name }}.zip ${{ github.workspace }}
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.${{ matrix.archive }}
          asset_name: ${{ matrix.asset_name }}.${{ matrix.archive }}
          asset_content_type: application/octet-stream
